<?php
/**
 *
 * @author Sam <mail.song.de.qiang@gmail.com>
 * This class manage to generate translation file based on 'yiic message ...' console command
 */
class HCPhpMessage{
	public function __call($name, $args){
		//
	}

	public static function message($config, $configRuntimeFile = null){
		if($configRuntimeFile === null){
			$configRuntimeFile = rtrim($config['messagePath'], '/\\') . DIRECTORY_SEPARATOR . 'config.rumtime.php';
		}

		$content = '<?php' . "\n" . 'return ' . strtr(var_export($config, true), array("\r" => '')) . ';';

		file_put_contents($configRuntimeFile, $content);

		// Command
		$runner = new CConsoleCommandRunner();

		$runner->addCommands(Yii::getPathOfAlias('system.cli.commands'));

		$args = array('yiic', 'message', $configRuntimeFile);

		ob_start();

		$runner->run($args);

		$logs = ob_get_clean();

		return $logs;
	}

	/**
	 * @param mixed $language, String or Array, language code to create translation files
	 * Create translation files based on console command 'yiic message ... '
	 */

	public static function createTranslation($language){
		if(empty($language)){
			throw new Exception('Parameter $language can not be empty !');
		}

		$messagePath = Yii::getPathOfAlias('frontend.messages');

		$config = require($messagePath . DIRECTORY_SEPARATOR . 'config.php');

		$config['languages'] = is_array($language) ? $language : array($language);

		self::message($config);
	}

	/**
	 * @param mixed $language, String or Array, language code to collect translation files
	 * Collect translation files simply, file categories without sub dirctories
	 *
	 */

	public static function collectTranslation($language){
		if(empty($language)){
			throw new Exception('Parameter $language can not be empty !');
		}

		$languagePath = Yii::getPathOfAlias('frontend.messages.' . $language) . DIRECTORY_SEPARATOR;

		$files = CFileHelper::findFiles($languagePath, array('fileTypes' => array('php'), 'exclude' => array(), 'level' => -1));

		$categories = array();

		foreach ($files as $file){
			$basename = basename($file, '.php');

			if(trim($basename) == '') continue;

			$category = base64_encode($basename);

			$data = $sort_data = array();

			$texts = include $file;

			foreach($texts as $source => $translation){
				if(trim($source) == '') continue;

				$textKey = base64_encode($source);

				$data[$textKey] = array(
					'source' => $source,
					'translation' => $translation,
				);

				$sort_data[] = $source;
			}

			if($data){
				array_multisort($sort_data, SORT_ASC, $data);

				$categories[$category] = array(
					'category' => $basename,
					'data' => $data,
				);
			}
		}

		return $categories;
	}

	/**
	 *
	 * @param $translations, Array, translations data, seeing self::collectTranslation to get more.
	 * @param $language, String, language code
	 */

	public static function updateTranslation($translations, $language){
		if(empty($translations) || empty($language)){
			throw new Exception('Parameters can not be empty !');
		}else if(! (is_array($translations) && is_string($language))){
			throw new Exception('Parameters type is not accepted !');
		}

		$languagePath = Yii::getPathOfAlias('frontend.messages.' . $language) . DIRECTORY_SEPARATOR;

		foreach($translations as $category){
			$fileName = $languagePath . $category['category'] . '.php';
			$messages = array();
			foreach($category['data'] as $text){
				$messages[$text['source']] = $text['translation'];
			}

			self::updateTranslationFile($messages,$fileName);
		}
	}

	/**
	 *
	 * @param Array $messages
	 * @param String $fileName
	 * @param Boolean $overwrite
	 * @param Boolean $removeOld
	 * @param Boolean $sort
	 * Update translation file, based on console command MessageCommand->generateMessageFile()
	 */

	public static function updateTranslationFile($messages,$fileName)
	{
		$merged=array();
		foreach($messages as $source => $message)
			$merged[$source]=$message;
		ksort($merged);

		$array=strtr(var_export($merged,true), array("\r" => ''));
		$content=<<<EOD
<?php
/**
 * Message translations.
 *
 * This file is automatically generated by 'yiic message' command.
 * It contains the localizable messages extracted from source code.
 * You may modify this file by translating the extracted messages.
 *
 * Each array element represents the translation (value) of a message (key).
 * If the value is empty, the message is considered as not translated.
 * Messages that no longer need translation will have their translations
 * enclosed between a pair of '@@' marks.
 *
 * Message string can be used with plural forms format. Check i18n section
 * of the guide for details.
 *
 * NOTE, this file must be saved in UTF-8 encoding.
 */
return $array;

EOD;
		(is_dir(dirname($fileName)) || CFileHelper::mkdir(dirname($fileName))) && file_put_contents($fileName, $content);
	}

	/**
	 * Delete translation message files
	 *
	 * @param $language
	 */

	public function deleteTranslation($language){
		if(empty($language)){
			throw new Exception('Parameter $language can not be empty !');
		}

		$languagePath = Yii::getPathOfAlias('frontend.messages.' . $language) . DIRECTORY_SEPARATOR;

		if(is_dir($directory = realpath($languagePath))){
			CFileHelper::removeDirectory($directory);
		}
	}

	/**
	 * Collecting Language relations
	 */

	public static function collectRelationModels(){
		$results = array();

		foreach(Language::model()->relations() as $relation){
			$results[] = $relation[1];
		}

		return $results;
	}

	/**
	 * Collecting relations model constrait keys
	 */

	public static function collectTableDistincts($modelClass){
		$selfPk = Language::model()->tableSchema->primaryKey;

		$excepts = array($selfPk => array());

		$primaryKey = $modelClass::model()->tableSchema->primaryKey;

		$excepts[$primaryKey] = array();

		$forignKeys = $modelClass::model()->tableSchema->foreignKeys;

		$distinctKeys = array_diff_key($forignKeys, $excepts);

		return array_keys($distinctKeys);
	}

	/**
	 * Insert active records after create new language based on relation
	 * keep constraits atrributes value
	 *
	 * @param $modelClass
	 * @param $language_id
	 */

	public static function createLanguageAR($modelClass, $language_id){
		$selfPk = Language::model()->tableSchema->primaryKey;

		$disticts = static::collectTableDistincts($modelClass);
		if(empty($disticts)){
			$disticts = array($modelClass::model()->tableSchema->primaryKey);
		}

		$distinct = implode(', ', $disticts);


		$distinctModels = $modelClass::model()->findAll(array('select' => $distinct , 'distinct' => true));

		foreach($distinctModels as $va){
			$model = new $modelClass;

			$model->setAttributes($va->getAttributes($disticts));

			$model->$selfPk = $language_id;

			$model->save(false);
		}

		return true;
	}
}
?>