<?php
/**
 * This is the template for generating the model class of a specified table.
 * In addition to the default model Code, this adds the CSaveRelationsBehavior
 * to the model class definition.
 * - $this: the ModelCode object
 * - $table: the table object
 * - $tableName: the table name for this class (prefix is already removed if necessary)
 * - $modelClass: the model class name
 * - $columns: list of table columns (name=>CDbColumnSchema)
 * - $labels: list of attribute labels (name=>label)
 * - $rules: list of validation rules
 * - $relations: list of relations (name=>relation declaration)
 * - $representingColumn: the name of the representing column for the table (string) or
 *   the names of the representing columns (array)
 * - $i18n: the i18n object
 */
?>
<?php echo "<?php\n"; ?>

/**
 * This is the model base class for the table "<?php echo $tableName; ?>".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "<?php echo $modelClass; ?>".
 *
 * Columns in table "<?php echo $tableName; ?>" available as properties of the model,
<?php if(!empty($relations)): ?>
 * followed by relations of table "<?php echo $tableName; ?>" available as properties of the model.
<?php else: ?>
 * and there are no model relations.
<?php endif; ?>
 *
<?php foreach($columns as $column): ?>
 * @property <?php echo $column->type.' $'.$column->name."\n"; ?>
<?php endforeach; ?>
 *
<?php foreach(array_keys($relations) as $name): ?>
 * @property <?php
	$relationData = $this->getRelationData($modelClass, $name);
	$relationType = $relationData[0];
	$relationModel = $relationData[1];

	if($i18n && $relationModel == $i18n->className){
		echo $relationModel . ' $' . $i18n->relationName . "\n * @property ";
	}

	switch($relationType) {
		case GxActiveRecord::BELONGS_TO:
		case GxActiveRecord::HAS_ONE:
			echo $relationModel;
			break;
		case GxActiveRecord::HAS_MANY:
		case GxActiveRecord::MANY_MANY:
			echo $relationModel . '[]';
			break;
		default:
			echo 'mixed';
	}
	echo ' $' . $name . "\n";
	?>
<?php endforeach; ?>
 */
abstract class <?php echo $this->baseModelClass; ?> extends <?php echo $this->baseClass; ?> {

<?php if($i18n):?>
	public $filterI18n;
<?php endif;?>

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '<?php echo $tableName; ?>';
	}

	public static function label($n = 1) {
		return Yii::t('m/<?php echo strtolower($modelClass)?>', '<?php echo $modelClass; ?>|<?php echo $this->pluralize($modelClass); ?>', $n);
	}

	public static function representingColumn() {
<?php if (is_array($representingColumn)): ?>
		return array(
<?php foreach($representingColumn as $representingColumn_item): ?>
			'<?php echo $representingColumn_item; ?>',
<?php endforeach; ?>
		);
<?php else: ?>
		return '<?php echo $representingColumn; ?>';
<?php endif; ?>
	}

	public function rules() {
		return array(
<?php foreach($rules as $rule): ?>
			<?php echo $rule.",\n"; ?>
<?php endforeach; ?>
			array('<?php echo implode(', ', array_keys($columns)); ?>', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
<?php foreach($relations as $name=>$relation): ?>
<?php
	if($i18n && preg_match("/^\s*array\(\s*self::HAS_MANY\s*,\s*'{$i18n->className}'\s*,/i", $relation))
	{
?>
			<?php echo "'" . $i18n->relationName . "' => " . preg_replace('/\)\s*$/', ', \'scopes\' => array(\'t\' => array())),' . "\n", strtr($relation, array('self::HAS_MANY' => 'self::HAS_ONE')));?>
<?php
		$relation = preg_replace('/\)\s*$/', ', \'index\' => \'' . GiixModelCode::I18N_LANGUAGE_COLUMN_NAME . '\')', $relation);
	}
?>
			<?php echo "'{$name}' => {$relation},\n"; ?>
<?php endforeach; ?>
		);
	}

	public function pivotModels() {
		return array(
<?php foreach($pivotModels as $relationName=>$pivotModel): ?>
			<?php echo "'{$relationName}' => '{$pivotModel}',\n"; ?>
<?php endforeach; ?>
		);
	}

	public function attributeLabels() {
		return array(
<?php foreach($labels as $name=>$label): ?>
<?php if($label === null): ?>
			<?php echo "'{$name}' => null,\n"; ?>
<?php else: ?>
			<?php echo "'{$name}' => {$label},\n"; ?>
<?php endif; ?>
<?php endforeach; ?>
		);
	}

	public function search() {
		$alias = $this->tableAlias;
	
		$criteria = new CDbCriteria;

<?php foreach($columns as $name=>$column): ?>
		$criteria->compare("{$alias}.<?php echo $name; ?>", $this-><?php echo $name; ?><?php echo ($column->type==='string' and !$column->isForeignKey) ? ', true' : ''; ?>);
<?php endforeach; ?>

<?php if($i18n):?>
		$criteria->with = array('<?php echo $i18n->relationNamePluralized?>');
		$criteria->group = "{$alias}.<?php echo $table->primaryKey?>";
		$criteria->together = true;

<?php foreach($i18n->table->columns as $name=>$column):?>
<?php if($column->autoIncrement) continue;?>
<?php if($column->isForeignKey && isset($columns[$name]) && $columns[$name]->isPrimaryKey) continue;?>
<?php if($name == GiixModelCode::I18N_LANGUAGE_COLUMN_NAME && $column->isForeignKey) continue;?>
		$criteria->compare('<?php echo $i18n->relationNamePluralized . '.' . $name; ?>', $this->filterI18n-><?php echo $name; ?><?php echo ($column->type==='string' and !$column->isForeignKey) ? ', true' : ''; ?>);
<?php endforeach;?>
<?php endif;?>

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'sort'=>array(
				'defaultOrder' => "<?php echo array_key_exists('sort_order', $columns) ? '{$alias}.sort_order DESC, ' : ''?>{$alias}.<?php echo $table->primaryKey?> ASC",
				'multiSort'=>true,
				'attributes'=>array(
<?php if(array_key_exists('sort_order', $columns)):?>
					'sort_order'=>array(
						'desc'=>"{$alias}.sort_order DESC",
						'asc'=>"{$alias}.sort_order ASC",
					),
<?php endif;?>
					'*',
				),
			),
<?php if(substr($tableName, -5) !== GiixModelCode::I18N_TABLE_SUFFIX && strpos($tableName, '2') === false):?>
			'pagination' => array(
				'pageSize' => Yii::app()->request->getParam('pageSize', 10),
				'pageVar' => 'page',
			),
<?php ;else:?>
			'pagination' => false,
<?php endif;?>
		));
	}

	public function behaviors() {
		return array(
			'CTimestampBehavior'=>array(
				'class' => 'zii.behaviors.CTimestampBehavior',
<?php if(array_key_exists('create_time', $columns)){?>
				'updateAttribute' => 'update_time',
<?php }else{?>
				'updateAttribute' => null,
<?php }?>
<?php if(array_key_exists('create_time', $columns)){?>
				'createAttribute' => 'create_time',
<?php }else{?>
                'createAttribute' => null,
<?php }?>
				'setUpdateOnCreate' => true,
			),
        );
	}
}